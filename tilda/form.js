/*
 * Tilda Custom Form.js v1.0
 * (c) 2025
 * by Daniel Abros
 * Site ‚Üí https://abrosdaniel.com
 * Telegram ‚Üí https://t.me/abrosdaniel
 */

class AbrosTiForm {
  constructor(options = {}) {
    this.settings = options.settings || {};
    this.scheme = options.scheme || {};
    this.currentForm = null;
    if (!window.AbrosTiForm) {
      window.AbrosTiForm = {};
    }
    if (!window.AbrosTiForm[this.settings.name]) {
      window.AbrosTiForm[this.settings.name] = {};
    }
    this.formData = window.AbrosTiForm[this.settings.name];
    this.init();
    console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã ${this.settings.name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.`);
    console.groupCollapsed(
      `%cüìã AbrosTiForm %c–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ñ–æ—Ä–º –≤ Tilda`,
      "background: #5292c9; color: white; border-radius: 5px; padding: 4px;",
      ""
    );
    console.groupCollapsed(`üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è`);
    console.log(
      `1. –î–æ–±–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ä–º—ã –≤ Tilda (–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞–∫ –∏ –≤ ZeroBlock).\n
      2. –î–æ–±–∞–≤–ª—è–µ—Ç–µ –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥", "–ù–∞–∑–∞–¥" –∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –µ—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è (–ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—ã —Å–≤–æ–∏).\n
      3. –£ –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ Variable name/–ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.\n
      4. –î–æ–±–∞–≤–ª—è–µ—Ç–µ –±–ª–æ–∫ BF204N. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–ª–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ. –ü–æ–ª—è –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å\n
      5. –ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–æ—Ä–º –Ω–∏–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç–µ T123 –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∫–æ–¥:\n\n
        <script>\n
        const form = new AbrosTiForm({\n
          settings: {\n
            name: "Name",\n
            type: {\n
              window: "popup", // popup –∏–ª–∏ default\n
              form: "quiz", // quiz –∏–ª–∏ default\n
            },\n
          },\n
          scheme: {\n
            form_1: {\n
              target: ".uc_form_1",\n
              next: {\n
                target: ".uc_form_1 .t-next",\n
                select: "form_2",\n
              },\n
            },\n
            form_2: {\n
              target: ".uc_form_2",\n
              prev: {\n
                target: ".uc_form_2 .t-prev",\n
                select: "form_1",\n
              },\n
              submit: {\n
                target: ".uc_form_2 .t-submit",\n
                select: ".t123__result_form",\n
              },\n
            },\n
          },\n
        });\n
        </script>\n\n
        6. –í –∫–æ–¥–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å settings.\n
           name - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π —Ñ–æ—Ä–º—ã.\n
           window - –¢–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (popup - –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –≤ popup –∏–ª–∏ default - –±–ª–æ–∫–æ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ).\n
           form - –¢–∏–ø —Ñ–æ—Ä–º—ã (quiz - –∫–∞–∂–¥–∞—è —Ñ–æ—Ä–º–∞ —ç—Ç–æ –∫–∞–∂–¥—ã–π —à–∞–≥ –∏–ª–∏ default - —Ä–∞—Å–ø–æ–ª–æ–≥–∞—é—Ç—Å—è —Ç–∞–∫ –∫–∞–∫ –≤ –º–∞–∫–µ—Ç–µ).\n
        7. –í –∫–æ–¥–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å scheme. –ö–∞–∂–¥—ã–π form_‚Ññ —ç—Ç–æ –∫–∞–∂–¥–∞—è –≤–∞—à–∞ —Ñ–æ—Ä–º–∞. –î–æ–±–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ú–∞–∫–µ—Ç —Ñ–æ—Ä–º—ã:\n\n
        form_1: { - –ò–º—è —Ñ–æ—Ä–º—ã —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ form_ –∏ –ø–æ—Ä—è–¥–∫–∞ —Ñ–æ—Ä–º—ã.\n
              target: ".uc_form_1", - –ö–ª–∞—Å—Å/ID –±–ª–æ–∫–∞ —Å —Ñ–æ—Ä–º–æ–π.\n
              function: () => {}, - –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã.\n
              next: { - –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥". –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n
                target: ".uc_form_1 .t-next", - –ö–ª–∞—Å—Å/ID –∫–Ω–æ–ø–∫–∏.\n
                select: "form_2", - –ò–º—è —Ñ–æ—Ä–º—ã –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥.\n
              },\n
              prev: { - –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥". –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n
                target: ".uc_form_1 .t-prev", - –ö–ª–∞—Å—Å/ID –∫–Ω–æ–ø–∫–∏.\n
                select: "form_1", - –ò–º—è —Ñ–æ—Ä–º—ã –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥.\n
              },\n
              submit: { - –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å". –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n
                target: ".uc_form_2 .t-submit", - –ö–ª–∞—Å—Å/ID –∫–Ω–æ–ø–∫–∏.\n
                select: ".uc_BF204N", - –ö–ª–∞—Å—Å/ID –±–ª–æ–∫–∞ BF204N.\n
              },\n
            },\n\n
        `
    );
    console.groupEnd();
    console.groupCollapsed(`üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è`);
    console.groupEnd();
    console.log(`üì¶ –í–µ—Ä—Å–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: 1.0`);
    console.log(
      `‚ú® –î–∞–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π. –£–∫–∞–∑–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.`
    );
    console.groupCollapsed(
      `%cüë®üèª‚Äçüíª Development by Daniel Abros`,
      "border: 1px solid; border-radius: 5px; padding: 4px;"
    );
    console.log(`üíª Site ‚Üí https://abrosdaniel.com`);
    console.groupEnd();
    console.groupEnd();
  }

  init() {
    if (this.settings.type?.window === "popup") {
      this.settings.type.form = "quiz";
    }
    const firstForm = Object.keys(this.scheme)[0];
    if (firstForm) {
      this.setForm(firstForm);
    }
    this.initForms();
    this.initFormTracking();
  }

  initForms() {
    Object.entries(this.scheme).forEach(([formName, form]) => {
      if (this.settings.type?.window === "popup") {
        this.moveFormsToParent(formName, form);
      }
      this.bindFormButtons(formName, form);
    });
  }

  moveFormsToParent(formName, form) {
    const form1Container = document.querySelector(this.scheme.form_1.target);
    if (form1Container && formName !== "form_1") {
      const form1Parent = form1Container.parentNode;

      t_onFuncLoad("initForms", () => {
        const formTarget = document.querySelector(form.target);
        if (formTarget) {
          console.log(
            `–ü–µ—Ä–µ–º–µ—â–∞–µ–º ${form.target} –≤ —Ä–æ–¥–∏—Ç–µ–ª—è ${this.scheme.form_1.target}`
          );
          form1Parent.appendChild(formTarget);
        }
      });
    }
  }

  bindFormButtons(formName, form) {
    const formTarget = document.querySelector(form.target);
    if (!formTarget) return;

    const bindButton = (buttonSelector, callback) => {
      const button = document.querySelector(buttonSelector);
      if (button) {
        button.addEventListener("click", callback);
      }
    };

    bindButton(form.next?.target, () =>
      this.handleFormChange(formTarget, formName, form.next?.select)
    );
    bindButton(form.prev?.target, () =>
      this.handleFormChange(formTarget, formName, form.prev?.select)
    );
    bindButton(form.submit?.target, () =>
      this.handleSubmit(formTarget, formName, form.submit)
    );
  }

  handleFormChange(formTarget, formName, targetForm) {
    const formElement = formTarget.querySelector("form");
    if (formElement) {
      this.updateFormData(formElement, formName);
    }
    if (targetForm) {
      this.setForm(targetForm);
    }
  }

  handleSubmit(formTarget, formName, submitConfig) {
    const formElement = formTarget.querySelector("form");
    if (formElement) {
      this.updateFormData(formElement, formName);
    }
    this.submitForm(submitConfig);
  }

  initFormTracking() {
    const formSelectors = Object.entries(this.scheme).map(
      ([formName, form]) => ({ selector: form.target, formName })
    );

    formSelectors.forEach(({ selector, formName }) => {
      const container = document.querySelector(selector);
      if (!container) {
        console.warn(`–ë–ª–æ–∫ —Å –∫–ª–∞—Å—Å–æ–º –∏–ª–∏ ID: ${selector} - –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return;
      }

      t_onFuncLoad("initForms", () => {
        const formElement = container.querySelector("form");
        if (formElement) {
          formElement.updateFormData = () =>
            this.updateFormData(formElement, formName);
          const stateBtnSubmit = formElement.querySelector(".t-submit");
          if (stateBtnSubmit) {
            stateBtnSubmit.style.display = "none !important";
          }
        }
      });
    });
  }

  updateFormData(formElement, formName) {
    t_onFuncLoad("t_forms__getFormDataJSON", () => {
      const formDataJSON = t_forms__getFormDataJSON(formElement) || {};
      if (!this.formData[formName]) {
        this.formData[formName] = {};
      }
      const currentFormData = this.formData[formName];

      Object.keys(currentFormData).forEach((key) => {
        if (!(key in formDataJSON)) {
          delete currentFormData[key];
        }
      });

      Object.entries(formDataJSON).forEach(([key, value]) => {
        if (
          key !== "tildaspec-elemid" &&
          key !== "form-spec-comments" &&
          key !== "tildaspec-phone-part" &&
          key !== "tildaspec-phone-part-iso"
        ) {
          currentFormData[key] = value;
        }
      });

      console.log("–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:", this.formData);
    });
  }

  setForm(formName) {
    if (!this.scheme[formName]) {
      console.error(`–®–∞–≥ ${formName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ö–µ–º–µ`);
      return;
    }
    const isDefaultForm = this.settings.type?.form === "default";

    Object.entries(this.scheme).forEach(([name, form]) => {
      const element = document.querySelector(form.target);
      if (element) {
        element.style.display =
          isDefaultForm || name === formName ? "block" : "none";
      }
    });

    if (this.scheme[formName]?.function) {
      this.scheme[formName].function();
    }

    this.currentForm = formName;
  }

  submitForm(submitConfig) {
    if (!submitConfig) return;

    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏:", this.formData);

    if (submitConfig.form) {
      const resultForm = document.querySelector(submitConfig.select);
      if (resultForm) {
        resultForm.style.display = "block";
      }
    }
  }
}
